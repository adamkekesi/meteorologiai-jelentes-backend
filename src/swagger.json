{
    "openapi": "3.0.1",
    "info": {
        "title": "REST API minta backend",
        "version": "1.0.0",
        "description": "<h1>Meateorológia jelentés Swagger</h1>"
    },
    "servers": [
        {
            "url": "http://localhost:5000"
        },
        {
            "url": "https://jedlik.cyclic.app"
        }
    ],
    "security": [{ "session": [] }],
    "paths": {
        "/cities": {
            "get": {
                "summary": "Get all cities",
                "description": "Retrieves all cities from the database",
                "tags": ["City"],
                "responses": {
                    "200": {
                        "description": "Successful response, returns an array of cities",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An array of cities",
                                    "type": "object",
                                    "properties": {
                                        "cities": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/City"
                                            }
                                        }
                                    }
                                },
                                "example": {
                                    "cities": [
                                        {
                                            "_id": 1,
                                            "code": "BP",
                                            "fullName": "Budapest"
                                        },
                                        {
                                            "_id": 2,
                                            "code": "DE",
                                            "fullName": "Debrecen"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Session id missing or session has expired, please log in!"
                                        },
                                        "status": {
                                            "type": "number",
                                            "example": 401
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "status": {
                                            "type": "number",
                                            "example": 500
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/cities/{id}": {
            "get": {
                "tags": ["City"],
                "summary": "Get a city by id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The id of the city"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response, returns the city",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/City"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "City not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CityNotFoundException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalServerErrorException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/measurements": {
            "get": {
                "summary": "Get all measurements",
                "tags": ["Measurement"],
                "responses": {
                    "200": {
                        "description": "Returns an array of all measurements",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Measurement"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new measurement",
                "tags": ["Measurement"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "measurement",
                        "description": "The measurement object to create",
                        "schema": {
                            "$ref": "#/components/schemas/Measurement"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns the newly created measurement",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Measurement"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/measurements/{id}": {
            "get": {
                "summary": "Get a measurement by ID",
                "tags": ["Measurement"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The ID of the measurement to retrieve",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CreateMeasurementDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the specified measurement",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateMeasurementDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Measurement not found"
                    }
                }
            },
            "put": {
                "summary": "Update a measurement by ID",
                "tags": ["Measurement"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The ID of the measurement to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CreateMeasurementDto"
                        }
                    },
                    {
                        "in": "path",
                        "name": "measurement",
                        "description": "The measurement object with new values",
                        "schema": {
                            "$ref": "#/components/schemas/CreateMeasurementDto"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the updated measurement",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateMeasurementDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Measurement not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete a measurement by ID",
                "tags": ["Measurement"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The ID of the measurement to delete",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CreateMeasurementDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Measurement deleted"
                    },
                    "404": {
                        "description": "Measurement not found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "CreateCityDto": {
                "type": "object",
                "description": "The class that contains the data for creating a new city.",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The code of the city, max 2 characters, Hungarian characters.",
                        "example": "BP",
                        "maxLength": 2
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the city, max 50 characters, Hungarian characters.",
                        "example": "Budapest",
                        "maxLength": 50
                    }
                },
                "required": ["code", "fullName"]
            },
            "City": {
                "type": "object",
                "description": "Database object that stores information about a city.",
                "properties": {
                    "_id": {
                        "type": "number",
                        "description": "The city's id"
                    },
                    "code": {
                        "type": "string",
                        "description": "The city's code",
                        "maxLength": 2
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the city",
                        "maxLength": 50
                    }
                },
                "required": ["_id", "code", "fullName"],
                "additionalProperties": false
            },
            "CityNotFoundException": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "HTTP status code of the error response",
                        "example": 404
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": "City with id 1 not found"
                    }
                }
            },
            "InternalServerErrorException": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "HTTP status code of the error response",
                        "example": 500
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": ""
                    }
                }
            },
            "IdNotValidException": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "HTTP status code of the error response",
                        "example": 404
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": "This 1 id is not valid."
                    }
                }
            },
            "Measurement": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "city": {
                        "type": "integer",
                        "description": "Reference to the City model",
                        "format": "int32"
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "wind": {
                        "type": "string"
                    },
                    "temperature": {
                        "type": "number",
                        "format": "float"
                    }
                },
                "required": ["_id", "city", "time", "wind", "temperature"]
            },

            "CreateMeasurementDto": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "number",
                        "format": "int32"
                    },
                    "city": {
                        "type": "number",
                        "format": "int32"
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "wind": {
                        "type": "string"
                    },
                    "temperature": {
                        "type": "number",
                        "format": "float"
                    }
                },
                "required": ["_id", "city", "time", "wind", "temperature"]
            }
        },
        "securitySchemes": {
            "session": {
                "type": "apiKey",
                "in": "cookie",
                "name": "mj-session"
            }
        }
    }
}
