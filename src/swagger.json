{
    "openapi": "3.0.1",
    "info": {
        "title": "REST API minta backend",
        "version": "1.0.0",
        "description": "<h1>When the impostor is sus à¶ž</h1>"
    },
    "servers": [
        {
            "url": "http://localhost:5000"
        },
        {
            "url": "https://jedlik.cyclic.app"
        }
    ],
    "paths": {
        "/measurements": {
            "get": {
              "summary": "Get all measurements",
              "responses": {
                "200": {
                  "description": "Returns an array of all measurements",
                  "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Measurement"
                          }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "Create a new measurement",
              "parameters": [
                {
                  "in": "path",
                  "name": "measurement",
                  "description": "The measurement object to create",
                  "schema": {
                    "$ref": "#/components/schemas/Measurement"
                  },
                  "required": true
                }
              ],
              "responses": {
                "201": {
                  "description": "Returns the newly created measurement",
                  "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Measurement"
                          }
                    }
                  }
                }
              }
            }
          },
          "/measurements/{id}": {
            "get": {
              "summary": "Get a measurement by ID",
              "parameters": [
                {
                  "in": "path",
                  "name": "id",
                  "description": "The ID of the measurement to retrieve",
                  "required": true,
                  "schema": {
                    "$ref": "#/components/schemas/CreateMeasurementDto"
                  }
                }
                
              ],
              "responses": {
                "200": {
                  "description": "Returns the specified measurement",
                  "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/CreateMeasurementDto"
                          }
                    }
                  }
                },
                "404": {
                  "description": "Measurement not found"
                }
              }
            },
            "put": {
              "summary": "Update a measurement by ID",
              "parameters": [
                {
                  "in": "path",
                  "name": "id",
                  "description": "The ID of the measurement to update",
                  "required": true,
                  "schema": {
                    "$ref": "#/components/schemas/CreateMeasurementDto"
                  }
                },
                {
                  "in": "path",
                  "name": "measurement",
                  "description": "The measurement object with new values",
                  "schema": {
                    "$ref": "#/components/schemas/CreateMeasurementDto"
                  },
                  "required": true
                }
              ],
              "responses": {
                "200": {
                  "description": "Returns the updated measurement",
                  "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/CreateMeasurementDto"
                          }
                    }
                  }
                },
                "404": {
                  "description": "Measurement not found"
                }
              }
            },
            "delete": {
              "summary": "Delete a measurement by ID",
              "parameters": [
                {
                  "in": "path",
                  "name": "id",
                  "description": "The ID of the measurement to delete",
                  "required": true,
                  "schema": {
                    "$ref": "#/components/schemas/CreateMeasurementDto"
                  }
                  
                }
              ],
              "responses": {
                "204": {
                  "description": "Measurement deleted"
                },
                "404": {
                  "description": "Measurement not found"
              }
            }
          }
        }
    },
    
    "components": {
        "schemas": {
            "Measurement": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "city": {
                    "type": "integer",
                    "description": "Reference to the City model",
                    "format": "int32"
                  },
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "wind": {
                    "type": "string"
                  },
                  "temperature": {
                    "type": "number",
                    "format": "float"
                  }
                },
                "required": [
                  "_id",
                  "city",
                  "time",
                  "wind",
                  "temperature"
                ]
              },

            "CreateMeasurementDto": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "number",
                    "format": "int32"
                  },
                  "city": {
                    "type": "number",
                    "format": "int32"
                  },
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "wind": {
                    "type": "string"
                  },
                  "temperature": {
                    "type": "number",
                    "format": "float"
                  }
                },
                "required": [
                  "_id",
                  "city",
                  "time",
                  "wind",
                  "temperature"
                ]
            }
        }
    }
}
